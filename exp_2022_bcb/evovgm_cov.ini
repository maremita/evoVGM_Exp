[io]
# Used to save training data, scores and figures
output_path = ../exp_outputs/CoV_BP001AK00001
# If False the program run the evaluation and save resutls in output_path
# else the program load results directly from the file (if it exists)
scores_from_file = True

[data]
# Get data from FASTA files or evolve new sequences
sim_data = False
from_fasta = True
fasta_fit_file = ../example_data/CoV/Cov_gene_S_Gblocks_Cleaned_6seqs.fasta
fasta_val_file = False
alignment_size = 100

## Evo parameters
## ##############
## IF sim_data is True, evoVGM.py will use these parameters 
## to simulate sequence alignments for fit and validation
## ELSE evoVGM.py will compare them with its infered parameters
#
# Branch lengths is list of M floats separated by comma (w/out space)
# M is the number of sequences to be evolved
branch_lengths = 0.03027,0.349819,0.164930,0.147524,0.33715,0.04247
# Substitution rates
#        AG     AC      AT   GC     GT     CT
#rates = 0.160, 0.16, 0.160, 0.160, 0.160, 0.160
rates = 0.225, 0.106, 0.164, 0.064, 0.070, 0.369
#rates = 0.16
# Relative frequencies
#        A     C      G      T
freqs = 0.288, 0.200, 0.190, 0.326
# freqs = 0.25

[subvmodel]
# jc69 := EvoVGM_JC69: infer a and b latent variables
# k80  := EvoVGM_K80 : infer a, b, k latent variables
# gtr  := EvoVGM_GTR : infer a, b, r, f latent variables
evomodel = gtr

[hperparams]
nb_replicates = 10
alpha_kl = 0.00001
nb_samples = 100
hidden_size = 32
nb_layers = 3
sample_temp = 0.1
n_epochs = 10000
# optimizer type : adam | sgd
optim=adam
learning_rate = 0.005
optim_weight_decay = 0.00001

[priors]
# accepted values for catgorical variables:  uniform | 0.2,0.4,0.2,0.2
# To implement empirical
ancestor_prior = uniform
rates_prior = uniform
freqs_prior = uniform
# accepted values for branch prior: 2 float values separated by comma (w/out space)
# mu and sigma
branch_prior = 0.01,1.
kappa_prior = 1.,1.

[settings]
# name of the job. If 'auto', the program
# generates automatically a name from timestamp
job_name = CoV_BP001AK00001
# cpu | cuda | cuda:0
device=cpu
seed=14
verbose=True

[plotting]
# To render Tex text in plots, Matplotlib requires
# Latex, dvipng, Ghostscript and type1ec.sty found in cm-super
# If Latex and other required packages are not installed, put to False
plt_usetex=False
y_limits = -4,0
print_xtick_every = 500
